Debug: apply 3.

Debug: intro x.
apply x.

Debug: intros x y.
apply x.

Debug: intros H y.
apply y.

Debug: intros x H.
apply x.

Debug: intros H H0 x.
apply x.

Debug: apply @eq_refl.

Debug: reflexivity.

Debug: reflexivity.

Debug: apply (eq_rect (A:=nat)).

Debug: rewrite eq_refl.
apply tt.

Debug: rewrite <- eq_refl.
apply I.

Debug: intros x H.
rewrite H.
rewrite <- H.
reflexivity.

Debug: intros a b H H0.
rewrite H0 in H.
apply H.

Debug:
intros a b H H0.
rewrite H0 in H.
rewrite <- H0 in H.
rewrite H0 in H.
apply H.

Debug: intros a b H H0.
reflexivity.

Debug: intros a b H H0.
reflexivity.

Debug: intros a b H.
left.
apply H.

Debug: intros a b H.
right.
apply H.

Debug: intros a b H H0.
split.
- apply H.
- apply H0.

Debug: split.
- left.
  reflexivity.
- right.
  reflexivity.

Debug:
intro x.
induction x as [ |x0 IHx].
- reflexivity.
- simpl.
  rewrite IHx.
  reflexivity.

Debug:
intros X xs ys zs.
revert ys zs.
induction xs as [ |a xs0 IHxs]; intros ys0 zs0.
- reflexivity.
- simpl.
  rewrite 
(IHxs ys0 zs0).
  reflexivity.

Debug:
intros P Q H.
induction H as [H0|H0].
- left.
  apply H0.
- right.
  apply H0.

Debug:
intros A l.
induction l as [ |a l0 IHl].
- reflexivity.
- simpl.
  rewrite 
(rev_unit (rev l0) a).
  simpl.
  rewrite IHl.
  reflexivity.

Debug:
intros n m.
revert m.
induction n as [ |n' H].
- intro H.
  left.
  reflexivity.
- intro H0.
  right.
  apply 
(not_eq_sym (O_S n')).

Debug: intros P H.
induction H as [].

Debug:
intros A B H H0.
induction H as [H1|H1].
- induction H0 as [H2|H2].
  + left.
    split.
    * apply H1.
    * apply H2.
  + right.
    intro H3.
    induction H3 as [H4 H5].
    * apply H2 in H5.
      induction H5 as [].
- induction H0 as [H2|H2]; right; intro H3.
  + induction H3 as [H4 H5].
    * apply H1 in H4.
      induction H4 as [].
  + induction H3 as [H4 H5].
    * apply H2 in H5.
      induction H5 as [].

Debug:
intro H.
induction H as [x p].
- exists x.
  rewrite 
(Nat.add_comm x 0) in p.
  apply p.

Debug: intros x P.
split; symmetry; apply P.

Debug: exists 0.
split; intros x y H.
- apply H.
- symmetry.
  apply H.
